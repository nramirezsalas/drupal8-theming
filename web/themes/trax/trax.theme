<?php

use Drupal\taxonomy\Entity;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\image\Entity\ImageStyle;
use Drupal\media_entity\MediaInterface;
use Drupal\file\Entity\File;
use Drupal\taxonomy\TermInterface;

function trax_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;

    // titulo para generar el nombre del page-template
    $current_uri = \Drupal::request()->getRequestUri();
    $current_uri = str_ireplace('/', '', $current_uri);
    $current_uri = str_ireplace('-', '_', $current_uri);
    $current_uri_pos = strpos($current_uri, '?');
    if ($current_uri_pos > 0) {
      $current_uri = substr($current_uri, 0, $current_uri_pos);
      $suggestions[] = 'page__node__' . $current_uri;
    } else {
      $suggestions[] = 'page__node__' . $current_uri;
    }

  }
  if (\Drupal::routeMatch()
      ->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()
      ->getRawParameter('taxonomy_term')
  ) {
    $term = Term::load($tid);
    $suggestions[] = 'page__taxonomy__' . $term->getVocabularyId();
  }
}

function trax_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  if (isset($variables['elements']['content']['#block_content'])) {
    //$info = strtolower($variables['elements']['content']['#block_content']->get('info')->value);
    //$info = cleanString($info);
    //array_splice($suggestions, 1, 0, 'block__' . $info);
    array_splice($suggestions, 1, 0, 'block__type__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

function trax_theme_suggestions_alter(array &$suggestions, array $variables)
{
  if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {
    $original_theme_hook = $variables['theme_hook_original'];
    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);
  }
  return $suggestions;
}

function trax_theme_suggestions_paragraph_alter(&$suggestions,
                                                $variables)
{
  $paragraph = $variables['elements']['#paragraph'];
  $parent = $paragraph->getParentEntity();
  if ($parent) {
    $suggestions[] = 'paragraph__' . $parent->bundle() . '__' . $paragraph->bundle();
  }
}

function trax_preprocess_html(&$variables)
{
  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['attributes']['class'][] = 'page-node-' . $node->id();
  }
  $current_path = \Drupal::service('path.current')->getPath();
  $variables['current_path'] = \Drupal::service('path.alias_manager')
    ->getAliasByPath($current_path);
}

function trax_preprocess_page(&$variables)
{

  // Para mostrar campos Taxonomy en Page
  if (\Drupal::routeMatch()
      ->getRouteName() == 'entity.taxonomy_term.canonical') {
    $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
    $variables['term'] = $term;

    // cargar data de la categorÃ­a
    $vocabulary = $term->bundle();

    switch ($vocabulary) {
      case 'tags':
        break;
      case 'c':
        // fondo cabecera
        $term_image = $term->get('field_fondo_cabecera')->entity;
        if ($term_image) {
          $term_image = file_create_url($term_image->getFileUri());
          $variables['term_image'] = $term_image;
        } else {
          $variables['term_image'] = '';
        }
        break;
    }


  }
}

function trax_preprocess_node(&$variables)
{
  $node = $variables['node'];
  $node_id = $node->id();
  $bundle = $node->bundle();
  $variables['node_id'] = $node_id;
  $node_title = $node->getTitle();
  $variables['node_title'] = $node_title;

  switch ($bundle) {
    case 'c__producto':
      // color
      $color_tid = $node->get('field_color')->target_id;

      // cargar data del color
      $color = Term::load($color_tid);
      $variables['producto_color'] = $color->getDescription();

      break;
  }

}

function trax_preprocess_block(&$variables)
{
  $uuid = $variables['derivative_plugin_id'];

  if ($uuid) {
    $block = \Drupal::service('entity.repository')
      ->loadEntityByUuid('block_content', $uuid);

    if ($block) {
      $block_type = $block->bundle();

      if ($block_type == 'counter') {
        $numero1_numero = $block->get('field_numero_velocidad')->first;
        $numero1_velocidad = $block->get('field_numero_velocidad')->second;
        $variables['numero1_numero'] = $numero1_numero;
        $variables['numero1_velocidad'] = $numero1_velocidad;

        $numero2_numero = $block->get('field_numero_velocidad_2')->first;
        $numero2_velocidad = $block->get('field_numero_velocidad_2')->second;
        $variables['numero2_numero'] = $numero2_numero;
        $variables['numero2_velocidad'] = $numero2_velocidad;
      }

      if ($block_type == 'banner_fondo') {
        //$variables['body'] = $block->get('body')->value;
        $image = $block->get('field_imagen_fondo')->entity;
        if ($image) {
          $img = file_create_url($image->getFileUri());
          $variables['background'] = 'background: url("' . $img . '")';
          $variables['image'] = $img;
        } else {
          $variables['background'] = '';
          $variables['image'] = '';
        }
      }

      if ($block_type == 'pie_de_pagina') {

      }

      if ($block_type == 'alerta') {
        $alerta = $block->get('field_activar_alerta')->value;
        if ($alerta == 1) {
          $variables['alerta'] = $alerta;
        } else {
          $variables['alerta'] = $alerta;
        }
      }

    }
  }
}

function trax_preprocess_taxonomy_term(&$variables)
{
  $term = $variables['term'];
  $variables['url'] = $term->url();
  $bundle = $term->bundle();

  switch ($bundle) {
    case 'categoria_producto':
      // color
      $color_tid = $term->get('field_color')->target_id;

      // cargar data del color
      $color = Term::load($color_tid);
      $variables['term_color'] = $color->getDescription();
      break;
  }

}


// funciones personalizadas
function _date_custom($date, $format_date)
{
  $tz = new DateTimeZone('Pacific/Honolulu');
  $date = new DateTime($date);
  $date->setTimezone($tz);
  return $date->format($format_date);
}

